#pragma once
// Generate String in Compile Time using constexpr
#include <array>
#include <iterator>
#include <string>

namespace ct {
	// Original code: https://guidedhacking.com/threads/random-number-generator-at-compile-time.15512/

	// modulus (2^31 - 1) or 0x7FFFFFFF in hex
	constexpr uint32_t m{ 2147483647 };
	static_assert(m > 0, "modulus is not greater than 0!");

	// multiplier
	constexpr uint32_t a{ 48271 };
	static_assert(0 < a && a < m, "multiplier is not between 0 and modulus!");

	// constant / increment
	constexpr uint32_t c{ 0 };
	static_assert(0 <= c && c < m, "increment is not between 0 and modulus!");

	// Defining the seed based on compile time in seconds since 00:00:00
	constexpr uint32_t seed = ((__TIME__[7] - '0') * 1 + (__TIME__[6] - '0') * 10
		+ (__TIME__[4] - '0') * 60 + (__TIME__[3] - '0') * 600
		+ (__TIME__[1] - '0') * 3600 + (__TIME__[0] - '0') * 36000);

	static_assert(0 <= seed && seed < m, "seed is not between 0 and modulus!");

	// This ensures that RNG() is evaluated at compile time! (Keyword: Template Metaprogramming)
	template <uint32_t Const>
	struct MakeConst
	{
		enum { Value = Const };
	};

	constexpr uint32_t RecursiveRNG(uint32_t num)
	{
		return (c + a * ((num > 0) ? RecursiveRNG(num - 1) : seed)) & m;
	}

	// Outputs random number as constexpr
#define LCG_RANDOM() (MakeConst<RecursiveRNG(__COUNTER__ + 1)>::Value)

	// Outputs a positive number in the given range
#define LCG_RANDOM_IN_RANGE(min, max) (min + (LCG_RANDOM() & m) % (max - min + 1))

	// Generator start
	class generate {
	private:
    // char box with some default chars to use, i'm just too lazy to do this in compile time, i can't do in a constructor by the nature of static constexpr function in a class
		static constexpr std::array<unsigned char, 256> cBox = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
			0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
			0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
			0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
			0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
			0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
			0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
			0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
			0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
			0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
			0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
			0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
			0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
			0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
			0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
			0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
			0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
			0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
			0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
			0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
			0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
			0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
			0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
			0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
			0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
		};

	public:
		template <const int sz>
		static constexpr std::string makeStr() {
			std::array<unsigned char, sz> buf;
			std::string str;

			for (int i = 0; i < sz; i++) {
				buf[i] = (cBox[LCG_RANDOM_IN_RANGE(0, (cBox.size() - 1))] % (__COUNTER__ + i + __TIME__[1] - __TIME__[0] + __TIME__[2]));
			}

			std::move(buf.begin(), buf.end(), std::back_inserter<std::string>(str));
			return str;
		}
	};
}
